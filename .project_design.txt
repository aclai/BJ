Blackjack - A loop of infinite games until player chooses to quit
	1 deck for now
	1 player for now
	Shuffle after every game
	No hole card
	Unlimited split
	Double on hard 10/11
	Dealer stops at hard 17

Class:
User
	name
	acct_balance
	bet
	hand
	
	create_user
	bet
	add_fund
	
Dealer
	game
	hand
	
Card
	suit
	card_num
	
	return_suit
	return_card_num
	card_reader
	move_random_card
	
Deck
	owner
	deck
	
	create_deck
	add_card
	remove_card
	empty_hand
	move_random_card
	
Functions:
	calculate_hand
	compare_hand
	new_game
	player_turn
	dealer_turn

Game

No loop
create/load player(s)
create dealer
create deck

Loop starts

Ask bet amount
deal cards - 1 player, 1 dealer, 1 player
check blackjack, double, split
	if bj --> deal card to dealer
	elif double 
		ask player
			if yes --> check fund
				if yes --> take fund & deal card to dealer
				else --> ask to add fund
					if yes --> ask for amount, take amount, deal 1 card to player, deal card to dealer
					else go to check split

deal to dealer
result
ask if player wants to continue


Class:
player - class create "player" with 3 attributes, name, acct_balance, and hand
	name - ask for player input
	acct_balance - defaut starts wtih 10000
	hand - {index, [betamount, [hand]]} 		(4 in total, limited by 4 of the same kind in a deck)
		{1, [100, [club of ace, spade of 10]]}
		{2, [200, [heart of ace, diamond of 2]]}
		...

CardCreate - class create "card" with 3 attributes, suit and number (suit does not matter in blackjack but useful for other card games)
	suit - 		diamond, club, heart, and spade
	number -	ace, 2-10, jack, queen, and king
	points -		ace = 1 or 11, 2 - 10 = 2 - 10, jack/queen/king = 10

deck() - generate a list of 52 unique card objects
	loop through suit and number and append to list

bet() - select amount to bet, limited to the lesser of 100 or the player's acct_balance
	pompt player to enter the integer within the limited range
	verify to be integer within range
	deduct amount from acct_balance and save to betamount	
	
deal_dealer() - deal 1 card from deck to dealer
	randomly select 1 card from deck
	remove from deck
	append to dealerhand[]
	if dealer has 2 cards:
		check_bj()
			if TRUE, break
	if dealer has more than 2 cards:
		check_bust()
			if TRUE, set dealerbust = TRUE
			break
		check_hard17()

deal_player() - deal 1 card from deck to player
	randomly select 1 card from deck
	remove from deck
	append to player's hand
	if player has 2 cards:
		check_bj(player)
			if TRUE, break
		check_split()
			if TRUE, break
		check_double()
			if TRUE, break
	if player has more than 2 cards:
		check_bust(player)
			if TRUE, set playerbust = TRUE
			break
	player_decision()
	
check_bj() - check if hand is blackjack
	if player's hand = 21 points, return TRUE

split - split them into 2 hands
	move 1 card from hand in index n to hand in index n+1 with same betamount
	loop through hand dictionary of player
		deal_player()
	
double - player hit once more and couble the bet amount
	call move_random_card
	corresponding betamount = betamount x 2

surrender - player lose half of betamount
	deduct half from betamount and add to acct_balance
	delete the other half

insurance - if dealer gets blackjack, it's a draw, else continue playing as usual and lose insurance bet

check_bust()
	
check_hard17()
	if dealerhand[] points is hard 17 or higher, check_winner()
	else dealerhand()

check_winner() - compare player's hand(s) to dealerhand
	loop through player's hand(s)
		determine hand value
		if player's hand > dealer's, win
		if player's hand == dealer's, draw
		else lose
	
player_decision - ask for player input
	Hit (Y/N)
	if Y - deal_player

new_game
	delete deck
	empty hand(s)
	empty bet(s)
	0 dealerhand
	check acct_balance, ask to add fund if under 100, not allow to play if fund hits 0
	Ask player if they want another game

